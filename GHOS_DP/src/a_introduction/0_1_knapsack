0-1 knapsack:
=============

input:
suppose there are items: I1, I2, I3, I4, I5
 
there is a weight array w[]={2,4,2,5,1}
there is a value array  v[]={5,3,4,2,7}

and there is a W denotes the capacity of knapsack. 
suppose W=7

output: Max profit

Why DP is required to solve the problem
1. Choice will be given: either In(nth item) will be added or not
2. Optimal things will be asked:Max profit is asked as output 




Choice Diagram:
===============
If In(nth item) is selected to put on knapsack then we have to check

 					                |--> if w[n-1]> W    then don't pick the item
 w[n-1] i.e weight of the (n-1)th item -->|
 					                |--> if w[n-1]<=W    then wither we can pick or don't pick
 					                
 W= capacity 
 n= length of the array
 
 we will be selecting items from the last(n-1) to first(index 0)
 
 Identifying the Recursive solution:
====================================

	public int knapsack(int w[], int val[], int W, int n){
	
		(code for Base condition)
		
		(code for Choice Diagram)
	}
	
	n= size of the array
	
  |===========================================================================|	
  |Effective way to identify Base Condition: Think of the smallest valid input|
  |===========================================================================|
	
	Base condition code:
	===============
	if(n==0 || W==0){
	 return 0;
	}
	
	if capacity is there but no item available to pick(i.e n=0) then profit will be 0.
	if items are available but there is no capacity of knapsack(i.e W=0), then the profit will be 0.
	
	Choice Diagram Code:
	====================
	if(w[n-1]<= W){
		return max(val[n - 1]+ knapsack(w,val, W - w[n - 1], n - 1),knapsack(w, val, W, n - 1));      
	}
	else{
	    return knapsack(w, val, W, n-1);  
	}
	
	explanation:
	============
	if w[n-1]<= W 
		then we have 2 option--> pick or don't pick
	
			if picked--> val[n - 1]+ knapSack(w,val, W - w[n - 1], n - 1)    
			add  val[n-1] in profit and call knapsack() from the reduced size array
			W will be reduced as item is picked.
			
			if not picked --> knapSack(w, val, W, n - 1))        
			select items from the reduced size array
	
	else    i.e w[n-1]>W then try selecting from the reduced size array
	

Memoization(or Top-down):
=========================
1. initialize a static DP[n+1][W+1] matrix and initialized it with -1.
2. after base condition if DP[n][W] is having some valid value then return it.
3. in other case calculate the result using recursion and store that in DP[][] matrix

	public static int knapsack(int w[], int val[], int W, int n) {

		if (n == 0 || W == 0) {
			return 0;
		}
		
		 if (DP[n][W] != -1)											//change-3
		        return DP[n][W];

		if (w[n - 1] <= W) {
			return DP[n][W]= max(val[n - 1] + knapsack(w, val, W - w[n - 1], n - 1), knapsack(w, val, W, n - 1));
		} else {
			return DP[n][W]=knapsack(w, val, W, n - 1);
		}
		
		//store the result in DP and then returned
	  }
	

Tabulation(or Buttom-up):
=========================
1. process of calling recursive function and store the value in DP[][] is omitted in Tabulation
2. only DP[][] table will be used without any recursive call.


	So the basic way is:
	====================
	1. initialize the 0th columns and 0th rows( base condition changes to initialization)
	2. convert the recursive call to iterative way to fill rest of the places
	** each of the places will hold the value of sub problems
	
	Suppose we have n=4 and W=10
	DP[3][5] denotes the result(max profit) for the knapsack if the size of the array is 3 
	and the capacity of the knapsack is 5.
	i.e input will be
	w[]={2,4,2};
	v[]={5,3,4};
	W=5
	
	using these sub problems we can derive DP[4][10] to find the final solution.
	
	=================================
	This is using recursive function:
	=================================
	public static int knapsack(int w[], int val[], int W, int n) {

		if (n == 0 || W == 0) {
			return 0;
		}
		
		 if (DP[n][W] != -1)											//change-3
		        return DP[n][W];

		if (w[n - 1] <= W) {
			return DP[n][W]= max(val[n - 1] + knapsack(w, val, W - w[n - 1], n - 1), knapsack(w, val, W, n - 1));
		} else {
			return DP[n][W]=knapsack(w, val, W, n - 1);
		}
		
		//store the result in DP and then returned
	  }
	  
	  ===================
	  Buttom-up approach:
	  ===================
	  
	  public static int knapsack(int w[], int val[], int W, int n) {

		int DP[][]=new int[n+1][W+1];
		
		for(int i=0;i<n;i++){
			for(int j=0; j<W; j++){
			   
			   if(i==0||j==0){
			     DP[i][j]=0;
					
					
				//replace n with i and W with j and knapsack with DP
				if (w[i - 1] <= j) {
				    DP[i][j]= max(val[i - 1] + DP[[i - 1], j - w[i - 1]], DP[i - 1][j]);
				} else {
					return DP[i][j]=DP[i - 1][j]);
				}
		
		//store the result in DP and then returned
	  }
	
	